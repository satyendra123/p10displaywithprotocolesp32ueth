# isme maine nand sir ke jaisa hi same ek display banane ka try kiya hai. abhi maine ise run krke nahi dekha hai.
#include <Preferences.h>
#include <DMD32.h>
#include "fonts/SystemFont5x7.h"
#include "fonts/Arial_Black_16.h"

// Define UART pins
#define RX_PIN 32
#define TX_PIN 33

// Initialize UART
HardwareSerial mySerial(2);

// Preferences for permanent storage
Preferences preferences;
String dataBuffer = "";

// Define arrows
// Define arrows
const byte upArrow[] PROGMEM = {
  16, 13,
  B00000001, B10000000,
  B00000011, B11000000,
  B00000111, B11100000,
  B00001111, B11110000,
  B00011111, B11111000,
  B00111111, B11111100,
  B01111111, B11111110,
  B11111111, B11111111,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
};

const byte downArrow[] PROGMEM = {
  16, 13,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
  B11111111, B11111111,
  B01111111, B11111110,
  B00111111, B11111100,
  B00011111, B11111000,
  B00001111, B11110000,
  B00000111, B11100000,
  B00000011, B11000000,
  B00000001, B10000000,
};

const byte leftArrow[] PROGMEM = {
  16, 13,
  B00000000, B10000000,
  B00000000, B11000000,
  B00000000, B11100000,
  B00000000, B11110000,
  B11111111, B11111000,
  B11111111, B11111100,
  B11111111, B11111110,
  B11111111, B11111110,
  B00000000, B11111100,
  B00000000, B11111000,
  B00000000, B11110000,
  B00000000, B11100000,
  B00000000, B10000000,
};

const byte rightArrow[] PROGMEM = {
  16, 13,
  B00000001, B00000000,
  B00000011, B00000000,
  B00000111, B00000000,
  B00001111, B00000000,
  B00011111, B11111111,
  B00111111, B11111111,
  B01111111, B11111111,
  B01111111, B11111111,
  B00111111, B00000000,
  B00011111, B00000000,
  B00001111, B00000000,
  B00000111, B00000000,
  B00000011, B00000000,
};

// DMD display setup
#define DISPLAYS_ACROSS 1
#define DISPLAYS_DOWN 1
DMD dmd(DISPLAYS_ACROSS, DISPLAYS_DOWN);

hw_timer_t *timer = NULL;

void IRAM_ATTR triggerScan() {
  dmd.scanDisplayBySPI();
}

void setup() {
  Serial.begin(115200);
  mySerial.begin(9600, SERIAL_8N1, RX_PIN, TX_PIN);
  
  // Initialize preferences for storing system ID
  preferences.begin("storage", false);
  displayStoredData();  // Load any saved data

  // Set up the DMD timer for display
  uint8_t cpuClock = ESP.getCpuFreqMHz();
  timer = timerBegin(0, cpuClock, true);
  timerAttachInterrupt(timer, &triggerScan, true);
  timerAlarmWrite(timer, 300, true);
  timerAlarmEnable(timer);
  disableCore0WDT();  // Disable watchdog for core 0
  disableCore1WDT();  // Disable watchdog for core 1

}

void drawArrow(const byte *arrow, int x, int y) {
  for (int i = 0; i < 13; i++) {  // 13 rows
    for (int j = 0; j < 16; j++) {  // 16 columns
      byte b = pgm_read_byte_near(arrow + i * 2 + (j / 8));  // Two bytes per row
      if (b & (1 << (7 - (j % 8)))) {
        dmd.drawLine(x + j, y + i, x + j, y + i, GRAPHICS_NORMAL);  // Simulate a pixel using drawLine
      }
    }
  }
}

void displayDataAtCoordinates(int x, int y, const String& data) {
  dmd.selectFont(SystemFont5x7);
  dmd.drawString(x, y, data.c_str(), data.length(), GRAPHICS_NORMAL);
}

void clearScreen() {
    dmd.clearScreen(true);  // Clear the DMD display
    Serial.println("Display cleared.");
}

void shiftCharacter(String data) {
  int startPos = data.indexOf("|F|") + 3;
  int endPos = data.indexOf('E', startPos);
  if (startPos >= 0 && endPos > startPos) {
    int position = data.substring(startPos, endPos).toInt();
    Serial.print("Shifting character to position: ");
    Serial.println(position);
  } else {
    Serial.println("Invalid shift character format");
  }
}

// Function to handle custom protocol
void customProtocol(String data) {
  Serial.println("Processing custom protocol...");
  extractData(data);
}

// Function to extract data
void extractData(String data) {
    // Default value for isTemporary
    bool isTemporary = true;  // Default to true, indicating temporary data

    int startPos = data.indexOf('|') + 1;
    int endPos = data.indexOf('|', startPos);
    String start_byte = data.substring(startPos, endPos);

    startPos = endPos + 1;
    endPos = data.indexOf('|', startPos);
    int ID = data.substring(startPos, endPos).toInt();

    startPos = endPos + 1;
    endPos = data.indexOf('|', startPos);
    int data_type_code = data.substring(startPos, endPos).toInt();

    // Determine if data is temporary or permanent based on data_type_code
    if (data_type_code == 8){
        isTemporary = false; // Permanent data for code 1 or 4
    }

    String data_type = (isTemporary) ? "temporary" : "permanent";

    startPos = endPos + 1;
    endPos = data.indexOf('|', startPos);
    int fakedata = data.substring(startPos, endPos).toInt();

    startPos = endPos + 1;
    endPos = data.indexOf('-', startPos);
    int x_axis = data.substring(startPos, endPos).toInt();

    startPos = endPos + 1;
    endPos = data.indexOf('-', startPos);
    int y_axis = data.substring(startPos, endPos).toInt();

    startPos = endPos + 1;
    endPos = data.indexOf('#', startPos);
    if (endPos != -1) {
        String arrowAndDisplayData = data.substring(endPos + 1);

        if (arrowAndDisplayData.length() > 1) {
            String arrow = arrowAndDisplayData.substring(0, 1);
            String display_data = arrowAndDisplayData.substring(1);

            // Clean up display_data if it ends with a "|"
            if (display_data.endsWith("|")) {
                display_data = display_data.substring(0, display_data.length() - 1);
            }

            Serial.println("Extracted Data:");
            Serial.println("ID: " + String(ID));
            Serial.println("Data Type: " + data_type);
            Serial.println("X Axis: " + String(x_axis));
            Serial.println("Y Axis: " + String(y_axis));
            Serial.println("Arrow: " + arrow);
            Serial.println("Display Data: " + display_data);

            // Drawing the arrow and displaying data
            drawArrow((arrow == "U") ? upArrow : (arrow == "D") ? downArrow : (arrow == "L") ? leftArrow : rightArrow, 0, 0);
            displayDataAtCoordinates(x_axis, y_axis, display_data);

            // Save data only if it is not temporary
            if (!isTemporary) {
                savePermanentData(x_axis, y_axis, display_data);
                Serial.println("Data is stored in the preference memory");
            }

        } else {
            Serial.println("Unknown arrow direction");
        }
    } else {
        Serial.println("Invalid data format, no '#' found");
    }
}


// Function to process incoming data
void processData(String data) {
   preferences.begin("my-app", true);  // Open Preferences in read-only mode
    int system_id = preferences.getInt("system_id", -1);  // Retrieve stored system ID
    preferences.end();

    if (data.startsWith("|S|")) {
        setSystemID(data);  // Set system ID when the command starts with |S|
    } 
    else if (data.startsWith("|C|")) {
        int incomingID = data.substring(3, data.indexOf("|", 3)).toInt();
        
        // Compare the incoming ID with the system's ID
        if (incomingID == system_id) {
            // Process the |C|... commands based on the different flags
            if (data.indexOf("|C|" + String(system_id) + "|4|") >= 0) {
                customProtocol(data);  // Handle custom protocol for |4|
            } 
            else if (data.indexOf("|C|" + String(system_id) + "|8|") >= 0) {
                Serial.println("Text is stored in the EEPROM Memory");
                extractData(data);  // Handle storing/displaying data for |8|
            } 
            else if (data.indexOf("|C|" + String(system_id) + "|6|") >= 0) {
                Serial.println("Clearing the display");
                clearScreen();  // Call the function to clear the screen for |6|
            } 
            else {
                Serial.println("Unknown command");
            }
        } else {
            Serial.println("ID mismatch. Command not for this system.");
        }
    } 
    else if (data.startsWith("|F|")) {
        shiftCharacter(data);  // Handle shifting characters for |F|
    } 
    else {
        Serial.println("Unknown command");
    }
}


// Function to set the system ID
void setSystemID(String data) {
    int startPos = data.indexOf("|S|") + 3;
    int endPos = data.indexOf('E', startPos);
    int id = data.substring(startPos, endPos).toInt();

    preferences.begin("my-app", false);  // Open Preferences in RW mode
    preferences.putInt("system_id", id);  // Store the system ID in Preferences
    preferences.end();

    Serial.print("System ID set to: ");
    Serial.println(id);
}

// Save data for permanent display
void savePermanentData(int x_axis, int y_axis, String display_data) {
    preferences.begin("my-app", false);  // Open Preferences in RW mode with a namespace
    preferences.putInt("xAxis", x_axis);  // Store X axis
    preferences.putInt("yAxis", y_axis);  // Store Y axis
    preferences.putString("displayData", display_data);  // Store display data
    preferences.end();

    Serial.println("Permanent data saved:");
    Serial.println("X Axis: " + String(x_axis));
    Serial.println("Y Axis: " + String(y_axis));
    Serial.println("Display Data: " + display_data);
}

// Load permanent data in the preference storage
void displayStoredData() {
    preferences.begin("my-app", true);  // Open Preferences in read-only mode
    if (preferences.isKey("xAxis") && preferences.isKey("yAxis") && preferences.isKey("displayData")) {
        int x_axis = preferences.getInt("xAxis");
        int y_axis = preferences.getInt("yAxis");
        String display_data = preferences.getString("displayData");
        displayDataAtCoordinates(x_axis, y_axis, display_data);
        Serial.println("Restored data from memory:");
        Serial.println("X Axis: " + String(x_axis));
        Serial.println("Y Axis: " + String(y_axis));
        Serial.println("Display Data: " + display_data);
    } else {
        Serial.println("No data found in Preferences.");
    }
    preferences.end();
}

// Main loop
void loop() {
  if (Serial.available() > 0) {
    char incomingChar = Serial.read();
    if (incomingChar == '\n' || incomingChar == '\r') {
      if (dataBuffer.length() > 0) {
        Serial.print("Received data: ");
        Serial.println(dataBuffer);
        processData(dataBuffer);
        dataBuffer = "";
      }
    } else {
      dataBuffer += incomingChar;
    }
  }
}
