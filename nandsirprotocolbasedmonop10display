#example-1 I AM USING THIS TO KNOW THAT HOW CAN I EXTRACT THE DATA FROM THE PROTOCOL

String data = "|C|1|4|1|28-0-#u#R96|";

void setup() {
  Serial.begin(9600);
  delay(2000); // Allow serial monitor to initialize

  Serial.println("Starting extraction...");
  extractData(data);
  Serial.println("Extraction complete.");
}

void loop() {
  // Nothing to do here
}

void extractData(String data) {
  // Extracting data without mapping
  int startPos = data.indexOf('|') + 1;
  int endPos = data.indexOf('|', startPos);
  String start_byte = data.substring(startPos, endPos);

  startPos = endPos + 1;
  endPos = data.indexOf('|', startPos);
  int ID = data.substring(startPos, endPos).toInt();

  startPos = endPos + 1;
  endPos = data.indexOf('|', startPos);
  int data_type_code = data.substring(startPos, endPos).toInt();
  String data_type = (data_type_code == 4) ? "temporary" : "permanent";

  startPos = endPos + 1;
  endPos = data.indexOf('|', startPos);
  int fakedata = data.substring(startPos, endPos).toInt();

  startPos = endPos + 1;
  endPos = data.indexOf('-', startPos);
  int x_axis = data.substring(startPos, endPos).toInt();

  startPos = endPos + 1;
  endPos = data.indexOf('-', startPos);
  int y_axis = data.substring(startPos, endPos).toInt();

  startPos = endPos + 2; // Skip past '-' and '#'
  endPos = data.indexOf('#', startPos);
  String arrow = data.substring(startPos, endPos);

  startPos = endPos + 1;
  endPos = data.indexOf('|', startPos);
  String colorWithData = data.substring(startPos, endPos);
  String actualColor = colorWithData.substring(0, 1);
  int display_data = colorWithData.substring(1).toInt();

  // Print the extracted data
  Serial.println("Extracted Data:");
  Serial.println("Start Byte: " + start_byte);
  Serial.println("ID: " + String(ID));
  Serial.println("Data Type: " + data_type);
  Serial.println("X Axis: " + String(x_axis));
  Serial.println("Y Axis: " + String(y_axis));
  Serial.println("Arrow: " + arrow);
  Serial.println("Color: " + actualColor);
  Serial.println("Display Data: " + String(display_data));
}

#EXAMPLE-2  using python without using the any library
data = "|C|1|4|1|28-0-#u#R96|"

def extract_data(data):
    # Extracting data without mapping
    start_pos = data.find('|') + 1
    end_pos = data.find('|', start_pos)
    start_byte = data[start_pos:end_pos]

    start_pos = end_pos + 1
    end_pos = data.find('|', start_pos)
    ID = int(data[start_pos:end_pos])

    start_pos = end_pos + 1
    end_pos = data.find('|', start_pos)
    data_type_code = int(data[start_pos:end_pos])
    data_type = "temporary" if data_type_code == 4 else "permanent"

    start_pos = end_pos + 1
    end_pos = data.find('|', start_pos)
    fakedata = int(data[start_pos:end_pos])

    start_pos = end_pos + 1
    end_pos = data.find('-', start_pos)
    x_axis = int(data[start_pos:end_pos])

    start_pos = end_pos + 1
    end_pos = data.find('-', start_pos)
    y_axis = int(data[start_pos:end_pos])

    start_pos = end_pos + 2  # Skip past '-' and '#'
    end_pos = data.find('#', start_pos)
    arrow = data[start_pos:end_pos]

    start_pos = end_pos + 1
    end_pos = data.find('|', start_pos)
    colorWithData = data[start_pos:end_pos]
    actualColor = colorWithData[0]
    display_data = int(colorWithData[1:])

    # Print the extracted data
    print("Extracted Data:")
    print("Start Byte:", start_byte)
    print("ID:", ID)
    print("Data Type:", data_type)
    print("X Axis:", x_axis)
    print("Y Axis:", y_axis)
    print("Arrow:", arrow)
    print("Color:", actualColor)
    print("Display Data:", display_data)

# Call the function with the data string
extract_data(data)

#EXAMPLE-3 using re library python code to extract the data
import re

data = "|C|1|8|1|28-0-#u#R96|"

def extract_data(data):
    # Define the regex pattern for extracting data
    pattern = r"\|([A-Z])\|(\d+)\|(\d+)\|(\d+)\|(\d+)-(\d+)-#(.*?)#(.*?)\|"

    # Use re.match to extract data
    match = re.match(pattern, data)
    if match:
        start_byte = match.group(1)
        ID = int(match.group(2))
        data_type_code = int(match.group(3))
        data_type = "temporary" if data_type_code == 4 else "permanent"
        fakedata = int(match.group(4))
        x_axis = int(match.group(5))
        y_axis = int(match.group(6))
        arrow = match.group(7)
        actualColor = match.group(8)[0]
        display_data = int(match.group(8)[1:])

        # Print the extracted data
        print("Extracted Data:")
        print("Start Byte:", start_byte)
        print("ID:", ID)
        print("Data Type:", data_type)
        print("Fake Data:", fakedata)
        print("X Axis:", x_axis)
        print("Y Axis:", y_axis)
        print("Arrow:", arrow)
        print("Color:", actualColor)
        print("Display Data:", display_data)
    else:
        print("No match found for the pattern.")

# Call the function with the data string
extract_data(data)

#EXAMPLE-4 in a single line of code how can i do the multiple protocol communication. this code is working and tested with esp32
'''
#EX-1 in this we just using the protocol and make it work. we are using the protocol to make it dynamic. so that we don't need to change the code again and again
import machine
import time
import re
from machine import UART

# Initialize UART
uart = UART(2, baudrate=9600, tx=33, rx=32)

system_id = None

# Function to set system ID
def set_system_id(data):
    global system_id
    pattern = rb"\|S\|(\d+)E"
    match = re.match(pattern, data)
    if match:
        system_id = int(match.group(1))
        print("System ID set to:", system_id)
    else:
        print("Invalid ID format")

# Function to clear screen based on ID match
def clear_screen(data):
    pattern = rb"\|C\|(\d+)\|6\|"
    match = re.match(pattern, data)
    if match:
        id_to_clear = int(match.group(1))
        if id_to_clear == system_id:
            print("Clearing screen...")
            # Implement actual screen clearing logic here
        else:
            print("ID mismatch, not clearing screen")
    else:
        print("Invalid clear screen format")

# Function to shift character based on position
def shift_character(data):
    pattern = rb"\|F\|(\d+)E"
    match = re.match(pattern, data)
    if match:
        position = int(match.group(1))
        print("Shifting character to position:", position)
        # Implement actual character shifting logic here
    else:
        print("Invalid shift character format")

# Function to handle custom protocol command
def custom_protocol(data):
    pattern = rb"\|C\|(\d+)\|(\d+)\|(\d+)\|(\d+)-(\d+)-#(.*?)#(.*?)\|"
    match = re.match(pattern, data)
    if match:
        ID = int(match.group(1))
        type_code = int(match.group(2))
        data_type = "temporary" if type_code == 4 else "permanent"
        fakedata = int(match.group(3))
        x_axis = int(match.group(4))
        y_axis = int(match.group(5))
        arrow = match.group(6).decode('utf-8')
        actualColor = chr(int(match.group(7)[0]))
        display_data = int(match.group(7)[1:])
        # Print the extracted data
        print("Extracted Data:")
        print("ID:", ID)
        print("Data Type:", data_type)
        print("Fake Data:", fakedata)
        print("X Axis:", x_axis)
        print("Y Axis:", y_axis)
        print("Arrow:", arrow)
        print("Color:", actualColor)
        print("Display Data:", display_data)
    else:
        print("Invalid custom protocol format")

# Function to process incoming data
def process_data(data):
    try:
        if isinstance(data, bytes):
            data_str = data.decode('utf-8').strip()
        else:
            data_str = data.strip()  # If already decoded or for debugging

        if data_str.startswith("|S|"):
            set_system_id(data)
        elif data_str.startswith("|C|"):
            # Check for clear screen command
            if "|C|" in data_str and "|6|" in data_str:
                clear_screen(data)
            # Check for custom protocol command
            elif "|C|" in data_str:
                custom_protocol(data)
            else:
                print("Unknown command")
        elif data_str.startswith("|F|"):
            shift_character(data)
        else:
            print("Unknown command")
    except UnicodeError as e:
        print("Unicode decoding error:", e)

# Main loop to continuously read UART data
while True:
    if uart.any():
        data = uart.read()
        print("Received data:", data)  # Print raw bytes received
        process_data(data)
    time.sleep(1)
'''

#EX-2 for this code i am storing the |C|1|8|1|28-0-#u#R87| data into the preference memory and update it each time for storing the permanent data.

import machine
import time
import re
from machine import UART

# Initialize UART
uart = UART(2, baudrate=9600, tx=33, rx=32)

# File path for storing permanent data
PERMANENT_DATA_FILE = "/permanent_data.txt"

# Function to save permanent data to file
def save_permanent_data(data):
    with open(PERMANENT_DATA_FILE, "a") as f:
        f.write(data + "\n")

# Function to load permanent data from file (if needed)
def load_permanent_data():
    try:
        with open(PERMANENT_DATA_FILE, "r") as f:
            return f.readlines()
    except OSError:
        return []

# Function to set system ID
def set_system_id(data):
    global system_id
    pattern = rb"\|S\|(\d+)E"
    match = re.match(pattern, data)
    if match:
        system_id = int(match.group(1))
        print("System ID set to:", system_id)
    else:
        print("Invalid ID format")

# Function to clear screen based on ID
def clear_screen(data):
    pattern = rb"\|C\|(\d+)\|6\|"
    match = re.match(pattern, data)
    if match:
        id_to_clear = int(match.group(1))
        if id_to_clear == system_id:
            print("Clearing screen...")
            # Implement actual screen clearing logic here
        else:
            print("ID mismatch, not clearing screen")
    else:
        print("Invalid clear screen format")

# Function to shift character to a specific position
def shift_character(data):
    pattern = rb"\|F\|(\d+)E"
    match = re.match(pattern, data)
    if match:
        position = int(match.group(1))
        print("Shifting character to position:", position)
        # Implement actual character shifting logic here
    else:
        print("Invalid shift character format")

# Function to handle custom protocol data
def custom_protocol(data):
    pattern = rb"\|C\|(\d+)\|(\d+)\|(\d+)\|(\d+)-(\d+)-#(.*?)#(.*?)\|"
    match = re.match(pattern, data)
    if match:
        ID = int(match.group(1))
        type_code = int(match.group(2))
        fakedata = int(match.group(3))
        x_axis = int(match.group(4))
        y_axis = int(match.group(5))
        arrow = match.group(6).decode('utf-8')  # Decode bytes to string for arrow
        actualColor = chr(int(match.group(7)[0]))  # Convert ASCII value to character for color
        display_data = int(match.group(7)[1:])  # Remaining characters as integer

        # Determine data type and handle accordingly
        if type_code == 4:
            data_type = "temporary"
            # Process normally for temporary data display
        elif type_code == 8:
            data_type = "permanent"
            # Save data to file for permanent storage
            data_to_store = f"|C|{ID}|{type_code}|{fakedata}|{x_axis}-{y_axis}-#{arrow}#{actualColor}{display_data}|"
            save_permanent_data(data_to_store)
            print("Permanent data stored:", data_to_store)
        else:
            print("Unknown data type")

        # Print the extracted data
        print("Extracted Data:")
        print("ID:", ID)
        print("Data Type:", data_type)
        print("Fake Data:", fakedata)
        print("X Axis:", x_axis)
        print("Y Axis:", y_axis)
        print("Arrow:", arrow)
        print("Color:", actualColor)
        print("Display Data:", display_data)
    else:
        print("Invalid custom protocol format")

# Function to process incoming data
def process_data(data):
    try:
        if isinstance(data, bytes):
            data_str = data.decode('utf-8').strip()
        else:
            data_str = data.strip()  # If already decoded or for debugging

        if data_str.startswith("|S|"):
            set_system_id(data)
        elif data_str.startswith("|C|"):
           # Check for clear screen command
            if "|C|" in data_str and "|6|" in data_str:
                clear_screen(data)
            # Check for custom protocol command
            elif "|C|" in data_str:
                custom_protocol(data)
            else:
                print("Unknown command")
        elif data_str.startswith("|F|"):
            shift_character(data)
        else:
            print("Unknown command")
    except UnicodeError as e:
        print("Unicode decoding error:", e)

# Main code to ensure file existence and process incoming data
try:
    # Check if the file exists or create it if it doesn't
    with open(PERMANENT_DATA_FILE, "r") as f:
        pass
except OSError:
    with open(PERMANENT_DATA_FILE, "w") as f:
        pass

# Main loop to process incoming data
while True:
    if uart.any():
        data = uart.read()
        print("Received data:", data)  # Print raw bytes received
        process_data(data)
    time.sleep(1)  # Adjust sleep time as needed
