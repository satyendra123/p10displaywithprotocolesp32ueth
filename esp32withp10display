#Step-1
#include <WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <DMD32.h>
//#include "fonts/Arial_black_16.h"
#include "fonts/Arial_bold_14.h"
// Replace with your network credentials

const char* ssid = "Kucing Santo";
const char* password = "kucingsanto2022";

// Define NTP Client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "id.pool.ntp.org", 25200); // set NTP server to "id.pool.ntp.org" (Indonesia timezone GMT+7)

DMD dmd(1, 1);

// Timer setup
hw_timer_t *timer = NULL;

bool isStopwatchMode = false;
unsigned long stopwatchStartTime = 0;

void IRAM_ATTR triggerScan()
{
  dmd.scanDisplayBySPI();
}

void ShowClockNumbers(unsigned int uiTime, byte bColonOn)
{
  dmd.clearScreen(true);
  dmd.drawChar(0, 2, '0' + ((uiTime % 10000) / 1000), GRAPHICS_NORMAL);
  dmd.drawChar(7, 2, '0' + ((uiTime % 1000) / 100), GRAPHICS_NORMAL);
  dmd.drawChar(19,2, '0' + ((uiTime % 100) / 10), GRAPHICS_NORMAL);
  dmd.drawChar(25,2, '0' + (uiTime % 10), GRAPHICS_NORMAL);
  if (bColonOn)
    dmd.drawChar(16, 1, ':', GRAPHICS_OR);
  else
    dmd.drawChar(16, 1, ':', GRAPHICS_NOR);
}

void ShowStopwatchNumbers(unsigned long stopwatchTime)
{
  unsigned int milliseconds = (stopwatchTime % 1000) / 100;
  unsigned int seconds = (stopwatchTime / 1000) % 60;
  unsigned int minutes = (stopwatchTime / 60000) % 60;
  unsigned int hours = (stopwatchTime / 3600000) % 24;

  dmd.clearScreen(true);
  dmd.drawChar(0, 2, '0' + ((hours % 100) / 10), GRAPHICS_NORMAL);
  dmd.drawChar(7, 2, '0' + (hours % 10), GRAPHICS_NORMAL);
  dmd.drawChar(16, 1, ':', GRAPHICS_NORMAL);
  dmd.drawChar(19, 2, '0' + ((minutes % 100) / 10), GRAPHICS_NORMAL);
  dmd.drawChar(25, 2, '0' + (minutes % 10), GRAPHICS_NORMAL);
  dmd.drawChar(36, 2, ':', GRAPHICS_NORMAL);
  dmd.drawChar(38, 2, '0' + ((seconds % 100) / 10), GRAPHICS_NORMAL);
  dmd.drawChar(45, 2, '0' + (seconds % 10), GRAPHICS_NORMAL);
  dmd.drawChar(50, 2, '.', GRAPHICS_NORMAL);
  dmd.drawChar(53, 2, '0' + milliseconds, GRAPHICS_NORMAL);
}
void setup()
{
  uint8_t cpuClock = ESP.getCpuFreqMHz();
  
  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Set the time zone and configure the NTP client
  configTime(7 * 3600, 0, "id.pool.ntp.org", "time.nist.gov");

  // Use 1st timer of 4 
  timer = timerBegin(0, cpuClock, true);
  
  // Attach triggerScan function to our timer 
  timerAttachInterrupt(timer, &triggerScan, true);
  
  // Set alarm to call triggerScan function  
  timerAlarmWrite(timer, 300, true);

  // Start an alarm 
  timerAlarmEnable(timer);

  dmd.clearScreen(true);
  dmd.selectFont(Arial_bold_14);
}
void loop()
{
static boolean stopWatchMode = false;
static unsigned long stopWatchStartTime = 0;
static unsigned long stopWatchElapsedTime = 0;

// check if the button on pin 4 is pressed to activate stopwatch mode
if (digitalRead(4) == HIGH) {
stopWatchMode = true;
stopWatchStartTime = millis();
stopWatchElapsedTime = 0;
}

// check if the button on pin 6 is pressed to exit stopwatch mode
if (digitalRead(17) == HIGH) {
stopWatchMode = false;
}

if (!stopWatchMode) {
// update the NTP client and get the current time
timeClient.update();
unsigned long currentTime = timeClient.getEpochTime();
// calculate the hours, minutes, and seconds
unsigned int hours = (currentTime / 3600) % 24;
unsigned int minutes = (currentTime / 60) % 60;
unsigned int seconds = currentTime % 60;

// draw the clock
ShowClockNumbers(hours * 100 + minutes, seconds % 2 == 0);
} else {
// calculate the elapsed time in milliseconds
stopWatchElapsedTime = millis() - stopWatchStartTime;
// calculate the elapsed time in minutes, seconds, and milliseconds
unsigned int minutes = stopWatchElapsedTime / 60000;
unsigned int seconds = (stopWatchElapsedTime % 60000) / 1000;
unsigned int milliseconds = stopWatchElapsedTime % 1000;

// draw the stopwatch
dmd.clearScreen(true);
dmd.drawChar(0, 2, '0' + ((minutes % 100) / 10), GRAPHICS_NORMAL);
dmd.drawChar(7, 2, '0' + (minutes % 10), GRAPHICS_NORMAL);
dmd.drawChar(16, 1, ':', GRAPHICS_NORMAL);
dmd.drawChar(19, 2, '0' + ((seconds % 100) / 10), GRAPHICS_NORMAL);
dmd.drawChar(25, 2, '0' + (seconds % 10), GRAPHICS_NORMAL);
dmd.drawChar(36, 2, '.', GRAPHICS_NORMAL);
dmd.drawChar(38, 2, '0' + ((milliseconds % 1000) / 100), GRAPHICS_NORMAL);
dmd.drawChar(45, 2, '0' + ((milliseconds % 100) / 10), GRAPHICS_NORMAL);
dmd.drawChar(52, 2, '0' + (milliseconds % 10), GRAPHICS_NORMAL);
}

// wait for a second
delay(1000);
}

#step-2 by ueth youtube channel
#include <DMD32.h>  //--> DMD32 by Qudor-Engineer (KHUDHUR ALFARHAN) : https://github.com/Qudor-Engineer/DMD32
#include "fonts/SystemFont5x7.h"
#include "fonts/Arial_black_16.h"
//----------------------------------------

// Fire up the DMD library as dmd.
#define DISPLAYS_ACROSS 1
#define DISPLAYS_DOWN 1
DMD dmd(DISPLAYS_ACROSS, DISPLAYS_DOWN);

// Timer setup.
// create a hardware timer  of ESP32.
hw_timer_t * timer = NULL;

//________________________________________________________________________________IRAM_ATTR triggerScan()
//  Interrupt handler for Timer1 (TimerOne) driven DMD refresh scanning,
//  this gets called at the period set in Timer1.initialize();
void IRAM_ATTR triggerScan() {
  dmd.scanDisplayBySPI();
}
//________________________________________________________________________________

//________________________________________________________________________________VOID SETUP()
void setup() {
  // put your setup code here, to run once:

  Serial.begin(115200);
  Serial.println();

  delay(500);

  Serial.println();
  Serial.println("return the clock speed of the CPU.");
  // return the clock speed of the CPU.
  uint8_t cpuClock = ESP.getCpuFreqMHz();
  delay(500);

  Serial.println();
  Serial.println("Timer Begin");
  // Use 1st timer of 4.
  // devide cpu clock speed on its speed value by MHz to get 1us for each signal  of the timer.
  timer = timerBegin(0, cpuClock, true);
  delay(500);

  Serial.println();
  Serial.println("Attach triggerScan function to our timer.");
  // Attach triggerScan function to our timer.
  timerAttachInterrupt(timer, &triggerScan, true);
  delay(500);

  Serial.println();
  Serial.println("Set alarm to call triggerScan function.");
  // Set alarm to call triggerScan function.
  // Repeat the alarm (third parameter).
  timerAlarmWrite(timer, 300, true);
  delay(500);

  Serial.println();
  Serial.println("Start an alarm.");
  // Start an alarm.
  timerAlarmEnable(timer);
  delay(500);
}
//________________________________________________________________________________

//________________________________________________________________________________VOID LOOP()
void loop() {
  // put your main code here, to run repeatedly:

  // If you want to change the font, don't forget to use this line of code : dmd.selectFont . Example: dmd.selectFont(Arial_Black_16);

  //----------------------------------------Demo with "Arial_Black_16" font.
  dmd.selectFont(Arial_Black_16);

  //.................Running Text.
  String txt_1 = "ESP32 with P10 LED Display";
  char char_array_txt_1[txt_1.length() + 1];
  txt_1.toCharArray(char_array_txt_1, txt_1.length() + 1);

  dmd.clearScreen(true);
  delay(1000);
  dmd.drawMarquee(char_array_txt_1,txt_1.length(),(32*DISPLAYS_ACROSS)-1,0);
  long start_1=millis();
  long timer_1=start_1;
  boolean ret=false;
  while(!ret){
   if ((timer_1+30) < millis()) {
     ret=dmd.stepMarquee(-1,0);
     timer_1=millis();
   }
  }
  //.................

  //.................Display Text.
  dmd.clearScreen(true);
  delay(1000);
  dmd.drawString(0,0,"DMD", 3, GRAPHICS_NORMAL);  //--> dmd.drawString(x, y, Text, Number of characters in text, GRAPHICS_NORMAL);
  delay(3000);
  //.................
  //----------------------------------------

  //----------------------------------------Demo with "SystemFont5x7" font.
  // If you use the font "SystemFont5x7", then 1 panel P10 (32x16) can display text in 2 rows.
  dmd.selectFont(SystemFont5x7);

  //.................Display Text.
  dmd.clearScreen(true);
  delay(1000);
  dmd.drawString(0,0,"ESP32", 5, GRAPHICS_NORMAL);
  dmd.drawString(0,9,"P10", 3, GRAPHICS_NORMAL);
  delay(3000);
  //.................

  //.................The first row displays text and the second row displays running text.
  String txt_2 = "ESP32 with P10 LED Display";
  char char_array_txt_2[txt_2.length() + 1];
  txt_2.toCharArray(char_array_txt_2, txt_2.length() + 1);
  int scrl_long = (txt_2.length()*6) + (32*DISPLAYS_ACROSS);

  dmd.clearScreen(true);
  delay(1000);
  
  // Displays text in the first row.
  dmd.drawString(4,0,"UTEH", 4, GRAPHICS_NORMAL);
  
  long start_2=millis();
  long timer_2=start_2;
  int i = 32*DISPLAYS_ACROSS;
  while(true){
    if ((timer_2+30) < millis()) {
      // Displays running text on the second row.
      dmd.drawString(i, 9, char_array_txt_2, txt_2.length(), GRAPHICS_NORMAL);
      
      if (i > ~scrl_long) {
        i--;
      } else {
        break;
      }
    
      timer_2=millis();
    }
  }
  //.................

  //.................Displays Text and Numbers.
  int T = 29;
  int H = 73;
  char char_array_T[String(T).length() + 1];
  char char_array_H[String(H).length() + 1];
  String(T).toCharArray(char_array_T, String(T).length() + 1);
  String(H).toCharArray(char_array_H, String(H).length() + 1);

  dmd.clearScreen(true);
  delay(1000);
  
  dmd.drawString(0, 0, "T:", 2, GRAPHICS_NORMAL);
  dmd.drawString(11, 0, char_array_T, String(T).length(), GRAPHICS_NORMAL);
  dmd.drawCircle(24, 1, 1, GRAPHICS_NORMAL);
  dmd.drawString(27, 0, "C", 1, GRAPHICS_NORMAL);
  
  dmd.drawString(0, 9, "H:", 2, GRAPHICS_NORMAL);
  dmd.drawString(11, 9, char_array_H, String(H).length(), GRAPHICS_NORMAL);
  dmd.drawString(27, 9, "%", 1, GRAPHICS_NORMAL);

  delay(3000);
  //.................
  //----------------------------------------
}

#EX-3 by teach me something
/*
#include <DMD32.h>
#include "fonts/SystemFont5x7.h"
#include "fonts/Arial_black_16.h"

#define DISPLAYS_ACROSS 1
#define DISPLAYS_DOWN 1
DMD dmd(DISPLAYS_ACROSS, DISPLAYS_DOWN);

hw_timer_t* timer = NULL;

void IRAM_ATTR triggerScan() {
  dmd.scanDisplayBySPI();
}
void setup() {
  Serial.begin(115200);
  delay(500);
  Serial.println();
  Serial.println("return the clock speed of the CPU.");
  uint8_t cpuClock = ESP.getCpuFreqMHz();
  delay(500);
  Serial.println();
  Serial.println("Timer Begin");
  timer = timerBegin(0, cpuClock, true);
  delay(500);
  Serial.println();
  Serial.println("Attach triggerScan function to our timer.");
  timerAttachInterrupt(timer, &triggerScan, true);
  delay(500);
  Serial.println();
  Serial.println("Set alarm to call triggerScan function.");
  timerAlarmWrite(timer, 300, true);
  delay(500);
  Serial.println();
  Serial.println("Start an alarm.");
  timerAlarmEnable(timer);
  delay(500);
}

void loop() {
  dmd.selectFont(Arial_Black_16);
  String txt_1 = "ESP32 With P10 LED Display";
  char char_array_txt_1[txt_1.length() + 1];
  txt_1.toCharArray(char_array_txt_1, txt_1.length() + 1);
  dmd.clearScreen(true);
  delay(1000);
  dmd.drawMarquee(char_array_txt_1, txt_1.length(), (32 * DISPLAYS_ACROSS) - 1, 0);
  long start_1 = millis();
  long timer_1 = start_1;
  boolean ret = false;
  while (!ret) {
    if ((timer_1 + 30) < millis()) {
      ret = dmd.stepMarquee(-1, 0);
      delay(50);
      timer_1 = millis();
    }
  }
  
}

*/
/*
#include <DMD32.h>
#include "fonts/SystemFont5x7.h"
#include "fonts/Arial_black_16.h"

#define DISPLAYS_ACROSS 1
#define DISPLAYS_DOWN 1
DMD dmd(DISPLAYS_ACROSS, DISPLAYS_DOWN);

hw_timer_t* timer = NULL;

void IRAM_ATTR triggerScan() {
  dmd.scanDisplayBySPI();
}
void setup() {
  Serial.begin(115200);
  delay(500);
  Serial.println();
  Serial.println("return the clock speed of the CPU.");
  uint8_t cpuClock = ESP.getCpuFreqMHz();
  delay(500);
  Serial.println();
  Serial.println("Timer Begin");
  timer = timerBegin(0, cpuClock, true);
  delay(500);
  Serial.println();
  Serial.println("Attach triggerScan function to our timer.");
  timerAttachInterrupt(timer, &triggerScan, true);
  delay(500);
  Serial.println();
  Serial.println("Set alarm to call triggerScan function.");
  timerAlarmWrite(timer, 300, true);
  delay(500);
  Serial.println();
  Serial.println("Start an alarm.");
  timerAlarmEnable(timer);
  delay(500);
}

void loop() {
  dmd.selectFont(Arial_Black_16);
  String txt_1 = "ESP32 With P10 LED Display";
  char char_array_txt_1[txt_1.length() + 1];
  txt_1.toCharArray(char_array_txt_1, txt_1.length() + 1);
  dmd.clearScreen(true);
  delay(1000);
  dmd.drawMarquee(char_array_txt_1, txt_1.length(), (32 * DISPLAYS_ACROSS) - 1, 0);
  long start_1 = millis();
  long timer_1 = start_1;
  boolean ret = false;
  while (!ret) {
    if ((timer_1 + 30) < millis()) {
      ret = dmd.stepMarquee(-1, 0);
      delay(50);
      timer_1 = millis();
    }
  }
  
}
*/

#include <DMD32.h>
#include "fonts/SystemFont5x7.h"
#include "fonts/Arial_Black_16_ISO_8859_1.h"
#include <string.h>

#define DISPLAYS_ACROSS 1
#define DISPLAYS_DOWN 1
DMD dmd(DISPLAYS_ACROSS, DISPLAYS_DOWN);

hw_timer_t * timer = NULL;

void IRAM_ATTR triggerScan()
{
  dmd.scanDisplayBySPI();
}

void setup(void)
{
  uint8_t cpuClock = ESP.getCpuFreqMHz();
  timer = timerBegin(0, cpuClock);
  timerAttachInterrupt(timer, &triggerScan, true);
  timerAlarmWrite(timer, 300000, true);
  timerAlarmEnable(timer);
  dmd.clearScreen(true);
  Serial.begin(115200);
}

void loop(void)
{
  dmd.clearScreen(true);
  dmd.selectFont(Arial_Black_16_ISO_8859_1);
  const char* MSG = "Fran""\xe7""ais, ""\xd6""sterreich, Magyarorsz""\xe1""g";
  dmd.drawMarquee(MSG, strlen(MSG), (32 * DISPLAYS_ACROSS) - 1, 0);
  long start = millis();
  long timer = start;
  while (1) {
    if ((timer + 30) < millis()) {
      dmd.stepMarquee(-1, 0);
      timer = millis();
    }
  }
}

